# Reusable Action for executing commands and retrying them if it fails
name: Command Retry Logic

inputs:
  # (Optional) Command to run before the retry command. To be used for environment setup, etc
  pre-command:
    required: false
    type: string
  # (Optional) Number of retries to perform. Default is 2
  max_retry:
    required: false
    type: number
    default: 2
  # (Required) Command to execute with the retry mechanism
  command:
    required: true
    type: string
  # (Required) Command to clean up resources before retrying the main command
  cleanup:
    required: false
    type: string
  # (Optional) Follow-up command after the main command is finished.
  post-command:
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Run command
      shell: bash
      env:
        PRE_COMMAND: ${{ inputs.pre-command }}
        MAX_RETRY: ${{ inputs.max_retry }}
        COMMAND: ${{ inputs.command }}
        CLEANUP: ${{ inputs.cleanup }}
        POST_COMMAND: ${{ inputs.post-command }}
      run: |
        eval "$PRE_COMMAND"
        
        retry_counter=0
        while [ $retry_counter -lt $MAX_RETRY ]; do
          attempt_failed=0
          eval "$COMMAND" || attempt_failed=$?
  
          if [ $attempt_failed -ne 0 ]; then
            eval "$CLEANUP"
            retry_counter=$(($retry_counter+1))
            sleep 5
          else
            break
          fi
  
          if [ $retry_counter -eq $max_retry ]; then
            echo "Max retry reached, command failed to execute properly. Exiting code"
            exit 1
          fi
        done
        
        eval "$POST_COMMAND"