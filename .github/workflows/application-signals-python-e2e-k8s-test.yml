## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the E2E test for App Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: Application Signals Enablement E2E Testing - Python K8s
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      caller-workflow-name:
        required: true
        type: string

concurrency:
  group: '${{ github.workflow }} @ ${{ inputs.aws-region }}'
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  # The presence of this env var is required for use by terraform and AWS CLI commands
  # It is not redundant
  AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
  TEST_ACCOUNT: ${{ secrets.APP_SIGNALS_E2E_TEST_ACC }}
  METRIC_NAMESPACE: ApplicationSignals
  LOG_GROUP_NAME: /aws/application-signals/data
  MASTER_NODE_SSH_KEY: ${{ secrets.APP_SIGNALS_E2E_K8S_PYTHON_SSH_KEY_IAD }}
  MAIN_SERVICE_ENDPOINT: ${{ secrets.APP_SIGNALS_E2E_PYTHON_K8S_GA_MASTER_NODE_ENDPOINT }}
  SAMPLE_APP_NAMESPACE: python-sample-app-namespace
  TEST_RESOURCES_FOLDER: /__w/aws-application-signals-test-framework/aws-application-signals-test-framework

jobs:
  e2e-k8s-test:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/h6o3z5z9/aws-application-signals-test-framework-workflow-container:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initiate Gradlew Daemon
        id: initiate-gradlew
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60

      - name: Generate testing id
        run: echo TESTING_ID="${{ env.AWS_DEFAULT_REGION }}-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.E2E_IAD_TEST_ACCOUNT_ARN }}
          aws-region: us-east-1

      - name: Retrieve account
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids:
            ACCOUNT_ID, region-account/${{ env.AWS_DEFAULT_REGION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ secrets.E2E_TEST_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Prepare and upload sample app deployment files
        working-directory: terraform/python/k8s/deploy/resources
        run: |
          sed -i 's#\${TESTING_ID}#${{ env.TESTING_ID }}#' python-frontend-service-depl.yaml
          sed -i 's#\${IMAGE}#${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.APP_SIGNALS_PYTHON_E2E_FE_SA_IMG }}#' python-frontend-service-depl.yaml
          sed -i 's#\${TESTING_ID}#${{ env.TESTING_ID }}#' python-remote-service-depl.yaml
          sed -i 's#\${IMAGE}#${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.APP_SIGNALS_PYTHON_E2E_RE_SA_IMG }}#' python-remote-service-depl.yaml
          aws s3api put-object --bucket ${{ secrets.APP_SIGNALS_E2E_EC2_JAR }}-prod-${{ env.AWS_DEFAULT_REGION }} --key python-frontend-service-depl.yaml --body python-frontend-service-depl.yaml
          aws s3api put-object --bucket ${{ secrets.APP_SIGNALS_E2E_EC2_JAR }}-prod-${{ env.AWS_DEFAULT_REGION }} --key python-remote-service-depl.yaml --body python-remote-service-depl.yaml

      - name: Initiate Terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/python/k8s/deploy && terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"
          max_retry: 6
          sleep_time: 60

      - name: Deploy Operator and Sample App using Terraform
        working-directory: terraform/python/k8s/deploy
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ env.AWS_DEFAULT_REGION }}" \
            -var="test_id=${{ env.TESTING_ID }}" \
            -var="ssh_key=${{ env.MASTER_NODE_SSH_KEY }}" \
            -var="host=${{ env.MAIN_SERVICE_ENDPOINT }}"

      - name: Get Remote Service IP
        run: |
          echo REMOTE_SERVICE_IP="$(aws ssm get-parameter --region ${{ env.AWS_DEFAULT_REGION }} --name python-remote-service-ip | jq -r '.Parameter.Value')" >> $GITHUB_ENV

      - name: Wait for app endpoint to come online
        id: endpoint-check
        run: |
          attempt_counter=0
          max_attempts=30
          until $(curl --output /dev/null --silent --head --fail http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100/); do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi
          
            printf '.'
            attempt_counter=$(($attempt_counter+1))
            sleep 10
          done

      # This steps increases the speed of the validation by creating the telemetry data in advance
      # It is run after the gradle build to give the app time to initialize after the pods become ready
      - name: Call all test APIs
        continue-on-error: true
        run: |
          curl -S -s "http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100/outgoing-http-call"; echo
          curl -S -s "http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100/aws-sdk-call?ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}"; echo
          curl -S -s "http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100/remote-service?ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}"; echo
          curl -S -s "http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100/client-call"; echo

      - name: Initiate Gradlew Daemon
        if: steps.initiate-gradlew == 'failure'
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60

      # Validation for pulse telemetry data
      - name: Validate generated EMF logs
        id: log-validation
        run: ./gradlew validator:run --args='-c python/k8s/log-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100
          --region ${{ env.AWS_DEFAULT_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --platform-info k8s-cluster-${{ env.TESTING_ID }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --service-name python-sample-application-${{ env.TESTING_ID }}
          --remote-service-name python-sample-r-app-deployment-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Validate generated metrics
        id: metric-validation
        if: (success() || steps.log-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c python/k8s/metric-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100
          --region ${{ env.AWS_DEFAULT_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --platform-info k8s-cluster-${{ env.TESTING_ID }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --service-name python-sample-application-${{ env.TESTING_ID }}
          --remote-service-name python-sample-r-app-deployment-${{ env.TESTING_ID }}
          --remote-service-deployment-name python-sample-r-app-deployment-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Validate generated traces
        id: trace-validation
        if: (success() || steps.log-validation.outcome == 'failure' || steps.metric-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c python/k8s/trace-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}:30100
          --region ${{ env.AWS_DEFAULT_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --platform-info k8s-cluster-${{ env.TESTING_ID }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --service-name python-sample-application-${{ env.TESTING_ID }}
          --remote-service-name python-sample-r-app-deployment-${{ env.TESTING_ID }}
          --remote-service-deployment-name python-sample-r-app-deployment-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Publish metric on test result
        if: always()
        run: |
          if [ "${{ steps.log-validation.outcome }}" = "success" ] && [ "${{ steps.metric-validation.outcome }}" = "success" ] && [ "${{ steps.trace-validation.outcome }}" = "success" ]; then
            aws cloudwatch put-metric-data --namespace 'ADOT/GitHubActions' \
            --metric-name Failure \
            --dimensions repository=${{ github.repository }},branch=${{ github.ref_name }},workflow=${{ inputs.caller-workflow-name }} \
            --value 0.0 \
            --region ${{ env.AWS_DEFAULT_REGION }}
          else
            aws cloudwatch put-metric-data --namespace 'ADOT/GitHubActions' \
            --metric-name Failure \
            --dimensions repository=${{ github.repository }},branch=${{ github.ref_name }},workflow=${{ inputs.caller-workflow-name }} \
            --value 1.0 \
            --region ${{ env.AWS_DEFAULT_REGION }}
          fi

      # Clean up Procedures
      - name: Initiate Terraform for Cleanup
        if: always()
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/python/k8s/cleanup && terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"

      - name: Clean Up Operator and Sample App using Terraform
        if: always()
        working-directory: terraform/python/k8s/cleanup
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ env.AWS_DEFAULT_REGION }}" \
            -var="test_id=${{ env.TESTING_ID }}" \
            -var="ssh_key=${{ env.MASTER_NODE_SSH_KEY }}" \
            -var="host=${{ env.MAIN_SERVICE_ENDPOINT }}"

      - name: Terraform destroy - deployment
        if: always()
        continue-on-error: true
        working-directory: terraform/python/k8s/deploy
        run: |
          terraform destroy -auto-approve \
            -var="test_id=${{ env.TESTING_ID }}"

      - name: Terraform destroy - cleanup
        if: always()
        continue-on-error: true
        working-directory: terraform/python/k8s/cleanup
        run: |
          terraform destroy -auto-approve \
            -var="test_id=${{ env.TESTING_ID }}"
