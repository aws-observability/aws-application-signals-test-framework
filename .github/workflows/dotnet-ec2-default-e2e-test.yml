## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the DotNet E2E Canary test for Application Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: DotNet EC2 Default Use Case
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      staging_wheel_name:
        required: false
        default: 'aws-opentelemetry-distro'
        type: string
      caller-workflow-name:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  SAMPLE_APP_ZIP: s3://${{ secrets.APP_SIGNALS_E2E_EC2_JAR }}-prod-${{ inputs.aws-region }}/dotnet-sample-app.zip
  METRIC_NAMESPACE: ApplicationSignals
  LOG_GROUP_NAME: /aws/application-signals/data
  ADOT_WHEEL_NAME: ${{ inputs.staging_wheel_name }}
  TEST_RESOURCES_FOLDER: ${GITHUB_WORKSPACE}
  GET_CW_AGENT_RPM_COMMAND: "wget -O cw-agent.rpm https://amazoncloudwatch-agent-${{ inputs.aws-region }}.s3.${{ inputs.aws-region }}.amazonaws.com/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"

jobs:
  dotnet-e2e-ec2-default-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'aws-observability/aws-application-signals-test-framework'
          ref: ${{ inputs.caller-workflow-name == 'main-build' && 'main' || github.ref }}
          fetch-depth: 0

      - name: Initiate Gradlew Daemon
        id: initiate-gradlew
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60

      - name: Generate testing id
        run: echo TESTING_ID="${{ github.job }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.E2E_IAD_TEST_ACCOUNT_ARN }}
          aws-region: us-east-1

      - name: Retrieve account
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids:
            ACCOUNT_ID, region-account/${{ inputs.aws-region }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ secrets.E2E_TEST_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      - uses: actions/download-artifact@v3
        if: inputs.caller-workflow-name == 'main-build'
        with:
          name: ${{ env.ADOT_WHEEL_NAME }}

      - name: Upload main-build adot distro to s3
        if: inputs.caller-workflow-name == 'main-build'
        run: aws s3 cp ${{ env.ADOT_WHEEL_NAME }} s3://adot-main-build-staging-jar/${{ env.ADOT_WHEEL_NAME }}

      - name: Set Get ADOT Distro command environment variable
        working-directory: terraform/dotnet/ec2/default
        run: echo GET_ADOT_DISTRO_COMMAND="aws s3 cp s3://adot-main-build-staging-jar/${{ env.ADOT_WHEEL_NAME }} ./${{ env.ADOT_WHEEL_NAME }} && unzip -d dotnet-distro ${{ env.ADOT_WHEEL_NAME }}" >> $GITHUB_ENV      
  #          if [ "${{ inputs.caller-workflow-name }}" = "main-build" ]; then
#            # Reusing the adot-main-build-staging-jar bucket to store the dotnet wheel file
#            echo GET_ADOT_DISTRO_COMMAND="aws s3 cp s3://adot-main-build-staging-jar/${{ env.ADOT_WHEEL_NAME }} ./${{ env.ADOT_WHEEL_NAME }} && unzip ${{ env.ADOT_WHEEL_NAME }}" >> $GITHUB_ENV
#          else
#            echo GET_ADOT_DISTRO_COMMAND="dotnet3.9 -m pip install ${{ env.ADOT_WHEEL_NAME }}" >> $GITHUB_ENV
#          fi

      - name: Initiate Terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"
          max_retry: 6
          sleep_time: 60
          working-directory: ./terraform/dotnet/ec2/default

      - name: Deploy sample app via terraform and wait for endpoint to come online
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: 'terraform apply -auto-approve
            -var="aws_region=${{ env.E2E_TEST_AWS_REGION }}"
            -var="test_id=${{ env.TESTING_ID }}"
            -var="sample_app_zip=${{ env.SAMPLE_APP_ZIP }}"
            -var="get_cw_agent_rpm_command=${{ env.GET_CW_AGENT_RPM_COMMAND }}"
            -var="get_adot_wheel_command=${{ env.GET_ADOT_WHEEL_COMMAND }}"'
          cleanup: 'terraform destroy -auto-approve -var="test_id=${{ env.TESTING_ID }}'
          max_retry: 2
          working-directory: ./terraform/dotnet/ec2/default

      - name: Get the ec2 instance ami id
        run: |
          echo "EC2_INSTANCE_AMI=$(terraform output ec2_instance_ami)" >> $GITHUB_ENV
        working-directory: terraform/dotnet/ec2/default

      - name: Get the sample app endpoint
        run: |
          echo "MAIN_SERVICE_ENDPOINT=localhost:8080" >> $GITHUB_ENV
          echo "REMOTE_SERVICE_IP=$(terraform output sample_app_remote_service_private_ip)" >> $GITHUB_ENV
          echo "MAIN_SERVICE_INSTANCE_ID=$(terraform output main_service_instance_id)" >> $GITHUB_ENV
        working-directory: terraform/dotnet/ec2/default

      - name: Initiate Gradlew Daemon
        if: steps.initiate-gradlew == 'failure'
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60

      # Validation for pulse telemetry data
      - name: Validate generated EMF logs
        id: log-validation
        run: ./gradlew validator:run --args='-c dotnet/ec2/default/log-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}:8081
          --region ${{ inputs.aws-region }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --service-name dotnet-sample-application-${{ env.TESTING_ID }}
          --remote-service-name dotnet-sample-remote-application-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
          --rollup'

      - name: Validate generated metrics
        id: metric-validation
        if: (success() || steps.log-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c dotnet/ec2/default/metric-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}:8081
          --region ${{ inputs.aws-region }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --service-name dotnet-sample-application-${{ env.TESTING_ID }}
          --remote-service-name dotnet-sample-remote-application-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}
          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
          --rollup'

      - name: Validate generated traces
        id: trace-validation
        if: (success() || steps.log-validation.outcome == 'failure' || steps.metric-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c dotnet/ec2/default/trace-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}:8081
          --region ${{ inputs.aws-region }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --service-name dotnet-sample-application-${{ env.TESTING_ID }}
          --remote-service-name dotnet-sample-remote-application-${{ env.TESTING_ID }}
          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
          --rollup'

      - name: Save test results
        if: always()
        id: validation-result
        run: |
          if [ "${{ steps.log-validation.outcome }}" = "success" ] && [ "${{ steps.metric-validation.outcome }}" = "success" ] && [ "${{ steps.trace-validation.outcome }}" = "success" ]; then
            echo "validation-result=success" >> $GITHUB_OUTPUT
          else
            echo "validation-result=failure" >> $GITHUB_OUTPUT
          fi

      # Clean up Procedures
      - name: Terraform destroy
        if: always()
        continue-on-error: true
        working-directory: terraform/dotnet/ec2/default
        run: |
          terraform destroy -auto-approve \
            -var="test_id=${{ env.TESTING_ID }}"

  emit-metric:
    needs: dotnet-e2e-ec2-default-test
    if: always()
    uses: ./.github/workflows/e2e-test-publish-result.yml
    secrets: inherit
    with:
      aws-region: ${{ inputs.aws-region }}
      caller-workflow-name: ${{ inputs.caller-workflow-name }}
      validation-result: ${{ needs.dotnet-e2e-ec2-default-test.outputs.validation-result }}