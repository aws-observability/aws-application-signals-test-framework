## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the Enablement test for App Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: Java EKS OTLP/OCB Use Case
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      test-cluster-name:
        required: true
        type: string
      caller-workflow-name:
        required: true
        type: string
      java-version:
        description: "Currently support version 8, 11, 17, 21, 22"
        required: false
        type: string
        default: '11'
      adot-image-name:
        required: false
        type: string
      cw-agent-operator-tag:
        required: false
        type: string
      e2e-otel-collector-image-tag:
        required: false
        type: string
        default: latest
    outputs:
      job-started:
        value: ${{ jobs.java-eks-otlp-ocb.outputs.job-started }}
      validation-result:
        value: ${{ jobs.java-eks-otlp-ocb.outputs.validation-result }}

permissions:
  id-token: write
  contents: read

env:
  # The precense of this env var is required for use by terraform and AWS CLI commands
  # It is not redundant
  E2E_TEST_AWS_REGION: ${{ inputs.aws-region }}
  CLUSTER_NAME: ${{ inputs.test-cluster-name }}
  CALLER_WORKFLOW_NAME: ${{ inputs.caller-workflow-name }}
  JAVA_VERSION: ${{ inputs.java-version }}
  ADOT_IMAGE_NAME: ${{ inputs.adot-image-name }}
  CW_AGENT_OPERATOR_TAG: ${{ inputs.cw-agent-operator-tag }}
  E2E_TEST_ACCOUNT_ID: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}
  E2E_TEST_ROLE_NAME: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME }}
  METRIC_NAMESPACE: ApplicationSignals
  LOG_GROUP_NAME: /aws/application-signals/data
  TEST_RESOURCES_FOLDER: ${GITHUB_WORKSPACE}
  E2E_OTEL_COLLECTOR_IMAGE_TAG: ${{ inputs.e2e-otel-collector-image-tag }}

jobs:
  java-eks-otlp-ocb:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      job-started: ${{ steps.job-started.outputs.job-started }}
      validation-result: ${{ steps.validation-result.outputs.validation-result }}
    steps:
      - name: Check if the job started
        id: job-started
        run: echo "job-started=true" >> $GITHUB_OUTPUT

      - name: Generate testing id and sample app namespace
        run: |
          echo TESTING_ID="${{ github.job }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_ENV
          echo SAMPLE_APP_NAMESPACE="ns-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: 'aws-observability/aws-application-signals-test-framework'
          ref: ${{ env.CALLER_WORKFLOW_NAME == 'main-build' && 'main' || github.ref }}
          fetch-depth: 0

      # We initialize Gradlew Daemon early on during the workflow because sometimes initialization
      # fails due to transient issues. If it fails here, then we will try again later before the validators
      - name: Initiate Gradlew Daemon
        id: initiate-gradlew
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60

      - name: Download enablement script
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          pre-command: "mkdir enablement-script && cd enablement-script"
          command: "wget https://raw.githubusercontent.com/aws-observability/application-signals-demo/refs/heads/ocb/scripts/eks/appsignals/install-otel-operator.sh"
          cleanup: "rm -f install-otel-operator.sh"
          post-command: "chmod +x install-otel-operator.sh"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: us-east-1

      - name: Retrieve account
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ACCOUNT_ID, otlp-region-account/gamma-${{ env.E2E_TEST_AWS_REGION }}
            JAVA_MAIN_SAMPLE_APP_IMAGE, e2e-test/java-main-sample-app-image
            JAVA_REMOTE_SAMPLE_APP_IMAGE, e2e-test/java-remote-sample-app-image

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: ${{ env.E2E_TEST_AWS_REGION }}

      # local directory to store the kubernetes config
      - name: Create kubeconfig directory
        run: mkdir -p ${{ github.workspace }}/.kube

      - name: Set KUBECONFIG environment variable
        run: echo KUBECONFIG="${{ github.workspace }}/.kube/config" >> $GITHUB_ENV

      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.E2E_TEST_AWS_REGION }}

      - name: Download and install eksctl
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          pre-command: 'mkdir ${{ github.workspace }}/eksctl'
          command: 'curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" 
            && tar -xzf eksctl_Linux_amd64.tar.gz -C ${{ github.workspace }}/eksctl && rm eksctl_Linux_amd64.tar.gz'
          cleanup: 'rm -f eksctl_Linux_amd64.tar.gz'

      - name: Add eksctl to Github Path
        run: |
          echo "${{ github.workspace }}/eksctl" >> $GITHUB_PATH

      # This step deletes lingering resources from previous test runs
      - name: Delete all sample app namespaces
        continue-on-error: true
        timeout-minutes: 5
        run: kubectl get namespace | awk '/^ns-[0-9]+-[0-9]+/{print $1}' | xargs --no-run-if-empty kubectl delete namespace

      # Set up App Signals permissions and resources
      # Renamed `service-account` to `sa` to get under 128 character limit for CFN stack names, which includes the namespace
      - name: Create role for AWS access from the sample app
        id: create_service_account
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "eksctl create iamserviceaccount \
            --name sa-${{ env.TESTING_ID }} \
            --namespace ${{ env.SAMPLE_APP_NAMESPACE }} \
            --cluster ${{ env.CLUSTER_NAME }} \
            --role-name eks-s3-access-${{ env.TESTING_ID }} \
            --attach-policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess \
            --region ${{ env.E2E_TEST_AWS_REGION }} \
            --approve"
          cleanup: "eksctl delete iamserviceaccount \
            --name sa-${{ env.TESTING_ID }} \
            --namespace ${{ env.SAMPLE_APP_NAMESPACE }} \
            --cluster ${{ env.CLUSTER_NAME }} \
            --region ${{ env.E2E_TEST_AWS_REGION }}"
          sleep_time: 60

      - name: Set up terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg"
          post-command: 'echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              && sudo apt update && sudo apt install terraform'
          sleep_time: 60

      - name: Initiate Terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/java/eks-otlp-ocb && terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"
          max_retry: 6
          sleep_time: 60

      - name: Set Sample App Image
        run: |
          echo MAIN_SAMPLE_APP_IMAGE_ARN="${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.E2E_TEST_AWS_REGION }}.amazonaws.com/${{ env.JAVA_MAIN_SAMPLE_APP_IMAGE }}:v${{ env.JAVA_VERSION }}" >> $GITHUB_ENV
          echo REMOTE_SAMPLE_APP_IMAGE_ARN="${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.E2E_TEST_AWS_REGION }}.amazonaws.com/${{ env.JAVA_REMOTE_SAMPLE_APP_IMAGE }}:v${{ env.JAVA_VERSION }}" >> $GITHUB_ENV

      - name: Install OTel Operator using enablement script
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "${{ env.TEST_RESOURCES_FOLDER }}/enablement-script/install-otel-operator.sh \
            ${{ env.CLUSTER_NAME }} \
            ${{ env.E2E_TEST_AWS_REGION }} \
            ${{ env.SAMPLE_APP_NAMESPACE }}"
          max_retry: 3
          sleep_time: 60

      - name: Install OTel Collector
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/java/eks-otlp-ocb/util && \
            sed -i -e 's#${E2E_TEST_AWS_REGION}#${{ env.E2E_TEST_AWS_REGION }}#g' ./appsignals-collector.yaml && \
            sed -i -e 's#${SAMPLE_APP_NAMESPACE}#${{ env.SAMPLE_APP_NAMESPACE }}#g' ./appsignals-collector.yaml && \
            sed -i -e 's#${E2E_OTEL_COLLECTOR_IMAGE}#${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.E2E_TEST_AWS_REGION }}.amazonaws.com/ocb-release-test-collector:${{ env.E2E_OTEL_COLLECTOR_IMAGE_TAG }}#g' ./appsignals-collector.yaml && \
            kubectl apply -f ./appsignals-collector.yaml -n ${{ env.SAMPLE_APP_NAMESPACE }}"
          cleanup: "kubectl delete -f ./appsignals-collector.yaml -n ${{ env.SAMPLE_APP_NAMESPACE }} && \
            aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.E2E_TEST_AWS_REGION }}"
          max_retry: 3
          sleep_time: 60

      - name: Deploy sample app via terraform and wait for the endpoint to come online
        id: deploy-sample-app
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/java/eks-otlp-ocb && \
            terraform apply -auto-approve \
              -var=\"test_id=${{ env.TESTING_ID }}\" \
              -var=\"aws_region=${{ env.E2E_TEST_AWS_REGION }}\" \
              -var=\"kube_directory_path=${{ github.workspace }}/.kube\" \
              -var=\"eks_cluster_name=${{ env.CLUSTER_NAME }}\" \
              -var=\"eks_cluster_context_name=$(kubectl config current-context)\" \
              -var=\"test_namespace=${{ env.SAMPLE_APP_NAMESPACE }}\" \
              -var=\"service_account_aws_access=sa-${{ env.TESTING_ID }}\" \
              -var=\"sample_app_image=${{ env.MAIN_SAMPLE_APP_IMAGE_ARN }}\" \
              -var=\"sample_remote_app_image=${{ env.REMOTE_SAMPLE_APP_IMAGE_ARN }}\" \
              -var='account_id=${{ env.ACCOUNT_ID }}'"
          cleanup: "terraform destroy -auto-approve \
            -var=\"test_id=${{ env.TESTING_ID }}\" \
            -var=\"aws_region=${{ env.E2E_TEST_AWS_REGION }}\" \
            -var=\"kube_directory_path=${{ github.workspace }}/.kube\" \
            -var=\"eks_cluster_name=${{ env.CLUSTER_NAME }}\" \
            -var=\"test_namespace=${{ env.SAMPLE_APP_NAMESPACE }}\" \
            -var=\"service_account_aws_access=sa-${{ env.TESTING_ID }}\" \
            -var=\"sample_app_image=${{ env.MAIN_SAMPLE_APP_IMAGE_ARN }}\" \
            -var=\"sample_remote_app_image=${{ env.REMOTE_SAMPLE_APP_IMAGE_ARN }}\""
          max_retry: 2
          sleep_time: 60

      - name: Get Remote Service Deployment Name
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: echo "REMOTE_SERVICE_DEPLOYMENT_NAME=$(kubectl get deployments -n ${{ env.SAMPLE_APP_NAMESPACE }} --selector=app=remote-app -o jsonpath='{.items[0].metadata.name}')" >> $GITHUB_ENV
          max_retry: 3
          sleep_time: 30

      - name: Get Remote Service IP
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: echo "REMOTE_SERVICE_POD_IP=$(kubectl get pods -n ${{ env.SAMPLE_APP_NAMESPACE }} --selector=app=remote-app -o jsonpath='{.items[0].status.podIP}')" >> $GITHUB_ENV
          max_retry: 3
          sleep_time: 30

      - name: Get Remote Service IP
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: echo "APP_ENDPOINT=$(kubectl get pods -n ${{ env.SAMPLE_APP_NAMESPACE }} --selector=app=sample-app -o jsonpath='{.items[0].status.podIP}'):8080" >> $GITHUB_ENV
          max_retry: 3
          sleep_time: 30

      - name: Set endpoints for the traffic generator
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: kubectl set env -n ${{ env.SAMPLE_APP_NAMESPACE }} deployment/traffic-generator MAIN_ENDPOINT=${{ env.APP_ENDPOINT }} REMOTE_ENDPOINT=${{ env.REMOTE_SERVICE_POD_IP }}
          max_retry: 3
          sleep_time: 30

      # Validation for app signals telemetry data
      - name: Call endpoint and validate generated EMF logs
        id: log-validation
        if: steps.deploy-sample-app.outcome == 'success' && !cancelled()
        run: ./gradlew validator:run --args='-c java/eks-otlp-ocb/log-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.APP_ENDPOINT }}
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --platform-info ${{ env.CLUSTER_NAME }}
          --service-name sample-application-${{ env.TESTING_ID }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_DEPLOYMENT_NAME }}
          --remote-service-ip ${{ env.REMOTE_SERVICE_POD_IP }}
          --query-string ip=${{ env.REMOTE_SERVICE_POD_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Call endpoints and validate generated metrics
        id: metric-validation
        if: (steps.deploy-sample-app.outcome == 'success' || steps.log-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c java/eks-otlp-ocb/metric-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.APP_ENDPOINT }}
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --platform-info ${{ env.CLUSTER_NAME }}
          --service-name sample-application-${{ env.TESTING_ID }}
          --remote-service-name sample-remote-application-${{ env.TESTING_ID }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_DEPLOYMENT_NAME }}
          --remote-service-ip ${{ env.REMOTE_SERVICE_POD_IP }}
          --query-string ip=${{ env.REMOTE_SERVICE_POD_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Call endpoints and validate generated traces
        id: trace-validation
        if: (steps.deploy-sample-app.outcome == 'success' || steps.log-validation.outcome == 'failure' || steps.metric-validation.outcome == 'failure') && !cancelled()
        run: ./gradlew validator:run --args='-c java/eks-otlp-ocb/trace-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.APP_ENDPOINT }}
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --account-id ${{ env.ACCOUNT_ID }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --app-namespace ${{ env.SAMPLE_APP_NAMESPACE }}
          --platform-info ${{ env.CLUSTER_NAME }}
          --service-name sample-application-${{ env.TESTING_ID }}
          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_DEPLOYMENT_NAME }}
          --remote-service-ip ${{ env.REMOTE_SERVICE_POD_IP }}
          --query-string ip=${{ env.REMOTE_SERVICE_POD_IP }}&testingId=${{ env.TESTING_ID }}
          --rollup'

      - name: Refresh AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: ${{ env.E2E_TEST_AWS_REGION }}

      - name: Save test results
        if: always()
        id: validation-result
        run: |
          if [ "${{ steps.trace-validation.outcome }}" = "success" ]; then
            echo "validation-result=success" >> $GITHUB_OUTPUT
          else
            echo "validation-result=failure" >> $GITHUB_OUTPUT
          fi

      - name: Clean up
        if: always()
        continue-on-error: true
        timeout-minutes: 5
        working-directory: terraform/java/eks-otlp-ocb/util
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.E2E_TEST_AWS_REGION }}
          kubectl delete ns ${{ env.SAMPLE_APP_NAMESPACE }}
          eksctl delete iamserviceaccount --name cloudwatch-agent --namespace amazon-cloudwatch --cluster ${{ env.CLUSTER_NAME }} --region ${{ env.E2E_TEST_AWS_REGION }}
          kubectl delete ns opentelemetry-operator-system
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.E2E_TEST_AWS_REGION }}

      - name: Terraform destroy
        if: always()
        continue-on-error: true
        timeout-minutes: 5
        working-directory: terraform/java/eks-otlp-ocb
        run: |
          terraform destroy -auto-approve \
            -var="test_id=${{ env.TESTING_ID }}" \
            -var="aws_region=${{ env.E2E_TEST_AWS_REGION }}" \
            -var="kube_directory_path=${{ github.workspace }}/.kube" \
            -var="eks_cluster_name=${{ env.CLUSTER_NAME }}" \
            -var="test_namespace=${{ env.SAMPLE_APP_NAMESPACE }}" \
            -var="service_account_aws_access=sa-${{ env.TESTING_ID }}" \
            -var="sample_app_image=${{ env.MAIN_SAMPLE_APP_IMAGE_ARN }}" \
            -var="sample_remote_app_image=${{ env.REMOTE_SAMPLE_APP_IMAGE_ARN }}"

      - name: Remove aws access service account
        if: always()
        continue-on-error: true
        run: |
          eksctl delete iamserviceaccount \
          --name sa-${{ env.TESTING_ID }} \
          --namespace ${{ env.SAMPLE_APP_NAMESPACE }} \
          --cluster ${{ env.CLUSTER_NAME }} \
          --region ${{ env.E2E_TEST_AWS_REGION }}

      - name: Remove Application Signals Collector IAM service account
        if: always()
        continue-on-error: true
        run: |
          eksctl delete iamserviceaccount \
            --name appsignals-collector \
            --namespace ${{ env.SAMPLE_APP_NAMESPACE }} \
            --cluster ${{ env.CLUSTER_NAME }} \
            --region ${{ env.E2E_TEST_AWS_REGION }}