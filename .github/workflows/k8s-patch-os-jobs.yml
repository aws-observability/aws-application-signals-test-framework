# The EC2 AMI for K8s needs to be updated to prevent it from becoming outdated. This workflow will run in the beginning of every month to replace the existing
# instances with new ones
name: K8s Patch OS Job

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      ec2_name:
        required: true
        type: string
      language:
        required: true
        type: string      
      
permissions:
  id-token: write
  contents: read

env:
  REPO: ${{ inputs.repo_name }}
  EC2_NAME: ${{ inputs.ec2_name }}
  LANGUAGE:  ${{ inputs.language }}
  E2E_TEST_AWS_REGION: us-east-1
  E2E_TEST_ACCOUNT_ID: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}
  E2E_TEST_ROLE_NAME: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME }}

jobs:
  create-k8s-on-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Testing ID
        run: |
          echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: us-east-1

      - name: Create New K8s on EC2
        working-directory: .github/workflows/util
        run: |
          ./setup-k8s.sh ${{ env.TESTING_ID }} ${{ env.EC2_NAME }}-${{ env.LANGUAGE }} ${{ env.E2E_TEST_AWS_REGION }}

      - name: Check if Secret Key Already Exist and If Not Create New Ones
        run: |
          SECRET_NAMES=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-pending-value"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key-pending-value"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-temporary-storage"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key-temporary-storage"
          )

          for SECRET_NAME in "${SECRET_NAMES[@]}"; do
            echo "Checking secret: $SECRET_NAME"


            if aws secretsmanager describe-secret --secret-id $SECRET_NAME; then
              echo "Secret $SECRET_NAME already exists."
            else
              echo "Secret $SECRET_NAME does not exist. Creating it now"
              aws secretsmanager create-secret --name $SECRET_NAME --secret-string "empty"
            fi
          done


      - name: Save Private Key and Master Public Endpoint to Secret Manager
        working-directory: .github/workflows/util
        run: |
          SECRET_NAMES=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-pending-value"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key-pending-value"
          )

          private_key_file=k8s-on-ec2-${{ env.EC2_NAME }}-${{ env.LANGUAGE }}-key-pair-${{ env.TESTING_ID }}.pem
          private_key_content=$(<"$private_key_file")

          master_public_ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=k8s-on-ec2-${{ env.EC2_NAME }}-${{ env.LANGUAGE }}-master-${{ env.TESTING_ID }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          aws secretsmanager update-secret --secret-id "${SECRET_NAMES[0]}" --secret-string "$master_public_ip"
          aws secretsmanager update-secret --secret-id "${SECRET_NAMES[1]}" --secret-string "$private_key_content"
  
  run-java-k8s-test:
    if: ${{ inputs.LANGUAGE == 'java' }}
    needs: create-k8s-on-ec2
    uses: ./.github/workflows/java-k8s-test.yml
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      caller-workflow-name: 'k8s-os-patching'
      caller-repository: ${{ inputs.repo_name }}

  run-python-k8s-test:
    if: ${{ inputs.LANGUAGE == 'python' }}
    needs: create-k8s-on-ec2
    uses: ./.github/workflows/python-k8s-test.yml
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      caller-workflow-name: 'k8s-os-patching'
      caller-repository: ${{ inputs.repo_name }}

  update-secrets:
    needs: [ run-java-k8s-test, run-python-k8s-test ]
    if: ${{ always() && (needs.run-java-k8s-test.result == 'success' || needs.run-python-k8s-test.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: us-east-1

      - name: Copy the current endpoint and ssh key to storage
        run: |         
          STORAGE_SECRET_KEYS=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-temporary-storage"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key-temporary-storage"
          )
          
          CURRENT_SECRET_KEYS=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key"
          )
          
          endpoint_secret=$(aws secretsmanager get-secret-value --secret-id "${CURRENT_SECRET_KEYS[0]}" --query SecretString --output text)
          ssh_secret=$(aws secretsmanager get-secret-value --secret-id "${CURRENT_SECRET_KEYS[1]}" --query SecretString --output text)
          
          aws secretsmanager update-secret --secret-id "${STORAGE_SECRET_KEYS[0]}" --secret-string "$endpoint_secret"
          aws secretsmanager update-secret --secret-id "${STORAGE_SECRET_KEYS[1]}" --secret-string "$ssh_secret"

      - name: Replace current endpoint and ssh key with the newly created ones
        run: |
          PENDING_SECRET_KEYS=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-pending-value"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key-pending-value"
          )

          CURRENT_SECRET_KEYS=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint"
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-ssh-key"
          )

          endpoint_secret=$(aws secretsmanager get-secret-value --secret-id "${PENDING_SECRET_KEYS[0]}" --query SecretString --output text)
          ssh_secret=$(aws secretsmanager get-secret-value --secret-id "${PENDING_SECRET_KEYS[1]}" --query SecretString --output text)

          aws secretsmanager update-secret --secret-id "${CURRENT_SECRET_KEYS[0]}" --secret-string "$endpoint_secret"
          aws secretsmanager update-secret --secret-id "${CURRENT_SECRET_KEYS[1]}" --secret-string "$ssh_secret"

  publish-metric:
    needs: [ update-secrets ]
    if: always()
    uses: ./.github/workflows/enablement-test-publish-result.yml
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      caller-workflow-name: 'enablement-test-k8s-patch-os'
      validation-result: ${{ needs.update-secrets.result }}

  cleanup-if-failed:
    needs: [ run-java-k8s-test, run-python-k8s-test ]
    if: ${{ always() && (needs.run-java-k8s-test.result != 'success' && needs.run-python-k8s-test.result != 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete Key Pair and EC2 Instance
        run: |
          PENDING_SECRET_KEYS=(
            "e2e-test/${{ matrix.instance.repo_name }}/${{ matrix.instance.language }}-k8s-master-node-endpoint-pending-value"
          )
          endpoint_secret=$(aws secretsmanager get-secret-value --secret-id "${PENDING_SECRET_KEYS[0]}" --query SecretString --output text)
          
          instance_name=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=$endpoint_secret" \
            --query "Reservations[*].Instances[*].{Name:Tags[?Key=='Name']|[0].Value}" \
            --output text)
          
          if [ -n "$instance_name" ]; then
            prev_testing_id=$(echo $instance_name | awk -F'-' '{print $(NF-1)"-"$NF}')
          
            aws ec2 delete-key-pair --key-name "k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-key-pair-$prev_testing_id"
          
            main_instance_name=k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-master-$prev_testing_id
            worker_instance_name=k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-worker-$prev_testing_id
            main_instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$main_instance_name" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
            worker_instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$worker_instance_name" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
            aws ec2 terminate-instances --instance-ids $main_instance_id
            aws ec2 terminate-instances --instance-ids $worker_instance_id
          fi
