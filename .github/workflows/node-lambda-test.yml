## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the Enablement test for App Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: Node EC2 Default Use Case
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      caller-workflow-name:
        required: true
        type: string
      staging-instrumentation-name:
        required: false
        default: '@aws/aws-distro-opentelemetry-node-autoinstrumentation'
        type: string
    outputs:
      job-started:
        value: ${{ jobs.node-ec2-default.outputs.job-started }}
      validation-result:
        value: ${{ jobs.node-ec2-default.outputs.validation-result }}

permissions:
  id-token: write
  contents: read

env:
  E2E_TEST_AWS_REGION: ${{ inputs.aws-region }}
  CALLER_WORKFLOW_NAME: ${{ inputs.caller-workflow-name }}
  ADOT_INSTRUMENTATION_NAME: ${{ inputs.staging-instrumentation-name }}
  SAMPLE_APP_ZIP: s3://aws-appsignals-sample-app-prod-${{ inputs.aws-region }}/node-sample-app.zip
  E2E_TEST_ACCOUNT_ID: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}
  E2E_TEST_ROLE_NAME: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME }}
  METRIC_NAMESPACE: ApplicationSignals
  LOG_GROUP_NAME: /aws/application-signals/data
  TEST_RESOURCES_FOLDER: ${GITHUB_WORKSPACE}

jobs:
  node-ec2-default:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      job-started: ${{ steps.job-started.outputs.job-started }}
      validation-result: ${{ steps.validation-result.outputs.validation-result }}
    steps:
      - name: Check if the job started
        id: job-started
        run: echo "job-started=true" >> $GITHUB_OUTPUT

      - name: Generate testing id
        run: echo TESTING_ID="${{ github.job }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: 'aws-observability/aws-application-signals-test-framework'
          ref: ${{ env.CALLER_WORKFLOW_NAME == 'main-build' && 'main' || github.ref }}
          fetch-depth: 0


      # We initialize Gradlew Daemon early on during the workflow because sometimes initialization
      # fails due to transient issues. If it fails here, then we will try again later before the validators
      - name: Initiate Gradlew Daemon
        id: initiate-gradlew
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::252610625673:role/pulse-enablement-workflow-role
          aws-region: us-west-1
      - name: Set Lambda Layer artifact directory path
        run: echo ARTIFACTS_DIR="${{ github.workspace }}/lambda_artifacts" >> $GITHUB_ENV

      - name: Download Lambda Layer and Function artifacts
        run: |
          aws s3 cp s3://adot-autoinstrumentation-node-staging-min-sfo/layer-${{ github.run_id }}.zip ${{ env.ARTIFACTS_DIR }}/layer.zip |
          aws s3 cp s3://adot-autoinstrumentation-node-staging-min-sfo/function-${{ github.run_id }}.zip ${{ env.ARTIFACTS_DIR }}/function.zip

      - name: Set up terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg"
          post-command: 'echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              && sudo apt update && sudo apt install terraform'
          sleep_time: 60

      - name: Initiate Terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/node/lambda/lambda && terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"
          max_retry: 6
          sleep_time: 60

      - name: Get terraform Lambda function name
        shell: bash
        run: |
          echo TERRAFORM_LAMBDA_FUNCTION_NAME=AdotLambdaNodeJsSampleApp-${{ github.run_id }}|
          tee --append $GITHUB_ENV
      - name: Apply terraform
        shell: bash
        run: terraform apply -auto-approve
        working-directory: ${{ inputs.terraform_directory }}
        env:
          TF_VAR_sdk_layer_name: AWSOpenTelemetryDistroJs-${{ github.run_id }}
          TF_VAR_function_name: ${{ env.TERRAFORM_LAMBDA_FUNCTION_NAME }}
          TF_VAR_layer_artifacts_directory: ${{ env.ARTIFACTS_DIR }}
#      - name: Extract endpoint
#        id: extract-endpoint
#        shell: bash
#        run: terraform output -raw api-gateway-url
#        working-directory: ${{ inputs.terraform_directory }}
#      - name: Send request to endpoint
#        shell: bash
#        run: sleep 30s; curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
#
#      # Validation for pulse telemetry data
#      - name: Validate generated EMF logs
#        id: log-validation
#        run: ./gradlew validator:run --args='-c node/ec2/default/log-validation.yml
#          --testing-id ${{ env.TESTING_ID }}
#          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
#          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}:8001
#          --region ${{ inputs.aws-region }}
#          --account-id ${{ env.ACCOUNT_ID }}
#          --metric-namespace ${{ env.METRIC_NAMESPACE }}
#          --log-group ${{ env.LOG_GROUP_NAME }}
#          --service-name node-sample-application-${{ env.TESTING_ID }}
#          --remote-service-name node-sample-remote-application-${{ env.TESTING_ID }}
#          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
#          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
#          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
#          --rollup'
#
#      - name: Validate generated metrics
#        id: metric-validation
#        if: (success() || steps.log-validation.outcome == 'failure') && !cancelled()
#        run: ./gradlew validator:run --args='-c node/ec2/default/metric-validation.yml
#          --testing-id ${{ env.TESTING_ID }}
#          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
#          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}:8001
#          --region ${{ inputs.aws-region }}
#          --account-id ${{ env.ACCOUNT_ID }}
#          --metric-namespace ${{ env.METRIC_NAMESPACE }}
#          --log-group ${{ env.LOG_GROUP_NAME }}
#          --service-name node-sample-application-${{ env.TESTING_ID }}
#          --remote-service-name node-sample-remote-application-${{ env.TESTING_ID }}
#          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
#          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
#          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
#          --rollup'
#
#      - name: Validate generated traces
#        id: trace-validation
#        if: (success() || steps.log-validation.outcome == 'failure' || steps.metric-validation.outcome == 'failure') && !cancelled()
#        run: ./gradlew validator:run --args='-c node/ec2/default/trace-validation.yml
#          --testing-id ${{ env.TESTING_ID }}
#          --endpoint http://${{ env.MAIN_SERVICE_ENDPOINT }}
#          --remote-service-deployment-name ${{ env.REMOTE_SERVICE_IP }}
#          --region ${{ inputs.aws-region }}
#          --account-id ${{ env.ACCOUNT_ID }}
#          --metric-namespace ${{ env.METRIC_NAMESPACE }}
#          --log-group ${{ env.LOG_GROUP_NAME }}
#          --service-name node-sample-application-${{ env.TESTING_ID }}
#          --remote-service-name node-sample-remote-application-${{ env.TESTING_ID }}
#          --query-string ip=${{ env.REMOTE_SERVICE_IP }}&testingId=${{ env.TESTING_ID }}
#          --instance-ami ${{ env.EC2_INSTANCE_AMI }}
#          --instance-id ${{ env.MAIN_SERVICE_INSTANCE_ID }}
#          --rollup'
#
#      - name: Refresh AWS Credentials
#        if: ${{ always() && github.event.repository.name == 'aws-application-signals-test-framework' }}
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
#          aws-region: ${{ env.E2E_TEST_AWS_REGION }}
#
#      - name: Save test results
#        if: always()
#        id: validation-result
#        run: |
#          if [ "${{ steps.log-validation.outcome }}" = "success" ] && [ "${{ steps.metric-validation.outcome }}" = "success" ] && [ "${{ steps.trace-validation.outcome }}" = "success" ]; then
#            echo "validation-result=success" >> $GITHUB_OUTPUT
#          else
#            echo "validation-result=failure" >> $GITHUB_OUTPUT
#          fi
#
#      # Clean up Procedures
#      - name: Terraform destroy
#        if: always()
#        continue-on-error: true
#        working-directory: terraform/node/ec2/default
#        run: |
#          terraform destroy -auto-approve \
#            -var="test_id=${{ env.TESTING_ID }}"
