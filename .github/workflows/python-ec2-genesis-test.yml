## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

name: Python EC2 LangChain Service Deployment
on:
  push:
    branches:
      - gen-ai-sample-app

permissions:
  id-token: write
  contents: read

env:
  E2E_TEST_AWS_REGION: 'us-west-2'
  # E2E_TEST_ACCOUNT_ID: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}
  # E2E_TEST_ROLE_NAME: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME }}
  E2E_TEST_ACCOUNT_ID: 571600841604
  E2E_TEST_ROLE_NAME: github
  METRIC_NAMESPACE: genesis
  LOG_GROUP_NAME: test/genesis
  TEST_RESOURCES_FOLDER: ${GITHUB_WORKSPACE}

jobs:
  python-ec2-adot-langchain:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Initiate Gradlew Daemon
        uses: ./.github/workflows/actions/execute_and_retry
        continue-on-error: true
        with:
          command: "./gradlew :validator:build"
          cleanup: "./gradlew clean"
          max_retry: 3
          sleep_time: 60
          
      - name: Generate testing id
        run: echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}-${RANDOM}" >> $GITHUB_ENV
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: ${{ env.E2E_TEST_AWS_REGION }}

      - name: Set up terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg"
          post-command: 'echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              && sudo apt update && sudo apt install terraform'
          sleep_time: 60

      - name: Initiate Terraform
        uses: ./.github/workflows/actions/execute_and_retry
        with:
          command: "cd ${{ env.TEST_RESOURCES_FOLDER }}/terraform/python/ec2/langchain && terraform init && terraform validate"
          cleanup: "rm -rf .terraform && rm -rf .terraform.lock.hcl"
          max_retry: 6
          sleep_time: 60

      - name: Deploy LangChain service via terraform
        working-directory: terraform/python/ec2/langchain
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ env.E2E_TEST_AWS_REGION }}" \
            -var="test_id=${{ env.TESTING_ID }}" \
            -var="service_zip_url=s3://sigv4perfresults/langchain-service.zip"

      - name: Get deployment info
        working-directory: terraform/python/ec2/langchain
        run: |
          echo "INSTANCE_IP=$(terraform output public_ip)" >> $GITHUB_ENV
          echo "INSTANCE_ID=$(terraform output instance_id)" >> $GITHUB_ENV

      - name: Test LangChain service
        run: |
          echo "Testing LangChain service at ${{ env.INSTANCE_IP }}:8000"
          curl -f http://${{ env.INSTANCE_IP }}:8000/health
          curl -f http://${{ env.INSTANCE_IP }}:8000/

      - name: Generate traffic
        run: |
          cd sample-apps/traffic-generator/genai
          chmod +x generate_traffic.sh
          ./generate_traffic.sh http://${{ env.INSTANCE_IP }}:8000

      - name: Validate generated logs
        run: ./gradlew validator:run --args='-c python/ec2/default/log-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.INSTANCE_IP }}:8000
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --log-group ${{ env.LOG_GROUP_NAME }}
          --service-name langchain-traceloop-app
          --instance-id ${{ env.INSTANCE_ID }}'

      - name: Validate generated metrics
        if: (success() || failure()) && !cancelled()
        run: ./gradlew validator:run --args='-c python/ec2/default/metric-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.INSTANCE_IP }}:8000
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --metric-namespace ${{ env.METRIC_NAMESPACE }}
          --service-name langchain-traceloop-app
          --instance-id ${{ env.INSTANCE_ID }}'

      - name: Validate generated traces
        if: (success() || failure()) && !cancelled()
        run: ./gradlew validator:run --args='-c python/ec2/default/trace-validation.yml
          --testing-id ${{ env.TESTING_ID }}
          --endpoint http://${{ env.INSTANCE_IP }}:8000
          --region ${{ env.E2E_TEST_AWS_REGION }}
          --account-id ${{ env.E2E_TEST_ACCOUNT_ID }}
          --service-name langchain-traceloop-app
          --instance-id ${{ env.INSTANCE_ID }}'

      - name: Cleanup
        if: always()
        continue-on-error: true
        working-directory: terraform/python/ec2/langchain
        run: |
          terraform destroy -auto-approve \
            -var="aws_region=${{ env.E2E_TEST_AWS_REGION }}" \
            -var="test_id=${{ env.TESTING_ID }}" \
            -var="service_zip_url=s3://sigv4perfresults/langchain-service.zip"